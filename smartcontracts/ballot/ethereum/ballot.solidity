pragma solidity ^0.4.16;

/// @title Voting for event proposals 
contract Ballot {
  // This declares a new complex type which will be used 
  // for variables later. It will represent a single voter.
  struct Voter {
    uint weight; // weight is accumulated by delegation
    bool voted; // if true, that person already voted
    uint vote; // index of the voted proposal
  }

  // This is a type for a single proposal.
  struct Proposal {
    bytes32 name; // short name (up to 32 bytes)
    uint voteCount; // number of accumulated votes
  } 
  address public chairperson;

  // This declares a state variable that
  // stores a `Voter` struct for each possible address.
  mapping(address => Voter) public voters;

  // A dynamically-sized array of `Proposal` structs.
  Proposal[] public proposals;

  /// Create a new ballot to choose one of `proposalNames`.
  function Ballot(bytes32[] proposalNames) public {
    chairperson = msg.sender;
    voters[chairperson].weight = 1;

    // For each of the provided proposal names, create a new
    // proposal object and add it to the end of the array.
    for (uint i = 0; i < proposalNames.length; i++) {
      // `Proposal({...})` creates a temporary Proposal object 
      // and proposals.push`appends it to the end of proposals
      proposals.push(Proposal({
        name: proposalNames[i],
        voteCount: 0
      }));
    }
  }

  // Give `voter` the right to vote on this ballot. 
  // May only be called by `chairperson`.
  function giveRightToVote(address voter) public {
    // If the argument of `require` evaluates to `false`, 
    // it terminates and reverts all changes to the state and to
    // Ether balances. It is often a good idea to use this if 
    // functions are called incorrectly.
    require(
      (msg.sender == chairperson) &&
      !voters[voter].voted &&
      (voters[voter].weight == 0)
    );
    voters[voter].weight = 1;
  }

  /// Give your vote to proposal `proposals[proposal].name`.
  function vote(uint proposal) public {
    Voter storage sender = voters[msg.sender];
    require(!sender.voted);
    sender.voted = true;
    sender.vote = proposal;

    // If `proposal` is out of the range of the array, this will 
    // throw automatically and revert all changes.
    proposals[proposal].voteCount += sender.weight;
  }
}